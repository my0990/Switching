{"version":3,"sources":["logo.svg","components/deskInput.js","components/test.js","components/test2.js","components/test3.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Desk","Desk2","DeskInput","props","useState","arr","doubleArr","setDoubleArr","deskClicked","i","j","copy","splice","console","log","map","a","onClick","Test","DeskWrapper","NumberContainer","Test2","numToggle","col","setCol","row","setRow","colRef","useRef","rowRef","isStarted","setIsStarted","startRef","lastRef","exRef","numArr","setNumArr","modalNumArr","setModalNumArr","exNumArr","setExNumArr","reset","index","set","transition","useTransition","from","x","opacity","position","enter","leave","nextClicked","e","state","pages","style","className","transform","window","innerWidth","padding","ref","id","placeholder","Button","variant","current","value","Row","parseInt","createArr","propsFunction","display","justifyContent","exArr","split","Number","tempArr","includes","push","sort","Math","random","createNumArr","height","length","is확인clicked","확인","set확인","transition2","innerHeight","item","confirm","alert","Page","width","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0243cfcd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: block;\r\n    background: white;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n   \r\n`\r\nconst Desk = styled.div`\r\n    width: 60px;\r\n    height: 35px;\r\n    background: skyblue;\r\n    border-radius: 5px;\r\n    &:hover {\r\n        cursor: pointer\r\n    }\r\n    margin: 5px;\r\n \r\n`\r\n\r\n//disabled Desk 스타일\r\nconst Desk2 = styled.div`\r\n    width: 60px;\r\n    height: 35px;\r\n    background: white;\r\n    border-radius: 5px;\r\n    &:hover {\r\n        cursor: pointer\r\n    }\r\n    margin: 5px;\r\n`\r\n\r\nfunction DeskInput(props){\r\n    const [doubleArr,setDoubleArr] = useState(props.arr)\r\n     \r\n    const deskClicked = (i,j) => {\r\n        \r\n            let copy = [...doubleArr];\r\n            if(copy[i][j]===1){\r\n                copy[i].splice(j,1,0)\r\n            } else {\r\n                copy[i].splice(j,1,1)\r\n            }\r\n            \r\n            setDoubleArr([...copy])\r\n        \r\n        console.log(doubleArr)\r\n    }\r\n\r\n\r\n    return(\r\n        <Container>\r\n            <table>\r\n            {/* 이차원 배열과 map함수로 desk 만들기 */}\r\n            {doubleArr.map((a,i)=>{\r\n                return(\r\n                    <tr>\r\n                        {doubleArr[i].map((a,j)=>{\r\n                            if(a===1){\r\n                                return(\r\n                                    <td>\r\n                                        <Desk onClick={()=>{deskClicked(i,j)}}>\r\n                                          \r\n                                            \r\n                                        </Desk>\r\n                                    </td>\r\n                                )\r\n                            } else {\r\n                              \r\n                                return (\r\n                                    <td>\r\n                                        <Desk2 onClick={()=>{deskClicked(i,j)}}>\r\n                                            \r\n                                        </Desk2>\r\n                                    </td>\r\n                                )\r\n                            }\r\n                            \r\n                        })}\r\n                    </tr>\r\n                )\r\n            })}\r\n            \r\n            </table> \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default DeskInput","import React,{useState, useEffect, useRef, forwardRef, useImperativeHandle} from 'react';\r\nimport styled from 'styled-components';\r\nimport {useTransition, animated, useSpring, to , useSpringRef} from 'react-spring'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button,Modal} from 'react-bootstrap';\r\nimport { style } from 'dom-helpers';\r\nimport useMeasure from 'react-use-measure';\r\nimport DeskInput from './deskInput';\r\n// 모달창 테스트\r\nconst Container = styled.div`\r\n    display: flex;\r\n    height: 500px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n\r\n`\r\n\r\nconst pages = [\r\n  ({style}) => <div className='item2'>2</div>,\r\n  ({style}) => <div className='item2'>2</div>,\r\n  ({style}) => <div className='item3'>3</div>,\r\n]\r\n\r\n\r\n\r\n\r\nfunction Test(){\r\n  const [index,set] = useState(0)\r\n  const transition = useTransition(index,{\r\n    from: {x: 100 , opacity: 0, position: 'absolute'},\r\n    enter: {x: 0, opacity: 1},\r\n    leave: {x: -100, opacity: 0}\r\n  })\r\n\r\n\r\n\r\n  return (\r\n  <Container>\r\n    {transition((style,item)=>{\r\n      const Page = pages[item]\r\n      return (\r\n      <animated.div style={style} >\r\n        <Page  />\r\n      </animated.div>\r\n      )\r\n    })}\r\n    \r\n    \r\n    \r\n  </Container>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Test;","import React, {useState, useEffect, useRef} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport {Modal,Button} from 'react-bootstrap';\r\nimport './test.css';\r\nimport {useTransition, animated, useSpring, to , useSpringRef} from 'react-spring';\r\nimport DeskInput from './deskInput';\r\n\r\n\r\n\r\n\r\n\r\n\r\n//전체 컨테이너\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    position: relative;\r\n    min-width: 600px;\r\n    \r\n    background: #eee; \r\n    \r\n    \r\n`\r\n\r\n//책상 래퍼\r\nconst DeskWrapper = styled.div`\r\n    width: 100%;\r\n    background: white;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 10px;\r\n`\r\n\r\n//책상인풋 wrapper\r\n\r\n\r\n\r\n\r\n//책상 스타일\r\nconst Desk = styled.div`\r\n    width: 100px;\r\n    height: 50px;\r\n    background: skyblue;\r\n    border-radius: 5px;\r\n    &:hover {\r\n\r\n        cursor: pointer\r\n    }\r\n    margin: 5px;\r\n`\r\n\r\n//disabled Desk 스타일\r\nconst Desk2 = styled.div`\r\n    width: 100px;\r\n    height: 50px;\r\n    background: white;\r\n    border-radius: 5px;\r\n    &:hover {\r\n        cursor: pointer\r\n    }\r\n    margin: 5px;\r\n`\r\n//생성,제외된 숫자 컨테이너\r\nconst NumberContainer = styled.div`\r\n    width: 90%;\r\n    height: 50%;\r\n    display: block;\r\n    background: white;\r\n    margin: 40px auto;\r\n    border-radius: 10px;\r\n    h4 {\r\n        text-align: left;\r\n        padding-left: 20px;\r\n        \r\n    }\r\n    \r\n    div div{\r\n        font-size: 1.5em;\r\n        width: 610px;\r\n        overflow: overlay;\r\n        height: 60%;\r\n        margin: 10px;\r\n        word-break:break-all;\r\n    }\r\n    \r\n`\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Test2() {\r\n\r\n\r\n\r\n\r\n    // 테스트\r\n   let numToggle = 0;\r\n\r\n\r\n    // 책상 만들기 기본 인풋 세팅\r\n    const [col,setCol] = useState(); \r\n    const [row,setRow] = useState();\r\n    const colRef = useRef();\r\n    const rowRef = useRef();\r\n\r\n    //배열 기본 세팅\r\n    const [doubleArr,setDoubleArr] = useState([]); \r\n\r\n\r\n    // 배열만들기\r\n    const createArr = () => {\r\n        if(!isStarted){\r\n        let arr = [];\r\n        for(let i=0;i<colRef.current.value;++i){\r\n            let Row = [];\r\n            for(let j=0;j<rowRef.current.value;++j){\r\n                Row[j] = 1;\r\n            }\r\n            arr[i] = Row;\r\n        }\r\n        setDoubleArr([...arr])\r\n        setCol(parseInt(colRef.current.value))\r\n        setRow(parseInt(rowRef.current.value))\r\n        \r\n    }\r\n    }\r\n\r\n    //Desk를 클릭했을때 2차원 배열 value를 0으로 만들기\r\n \r\n    const deskClicked = (i,j) => {\r\n        if(!isStarted){\r\n            let copy = [...doubleArr];\r\n            if(copy[i][j]===1){\r\n                copy[i].splice(j,1,0)\r\n            } else {\r\n                copy[i].splice(j,1,1)\r\n            }\r\n            \r\n            setDoubleArr([...copy])\r\n        }\r\n        console.log(doubleArr)\r\n    }\r\n\r\n    //start toggle 번호 부여후 토글 바뀜\r\n    const [isStarted,setIsStarted] = useState(false)\r\n\r\n\r\n\r\n    // 번호생성\r\n    // 번호생성 셋팅\r\n\r\n    // 인풋 ref\r\n    const startRef = useRef();\r\n    const lastRef = useRef();\r\n    const exRef = useRef();\r\n\r\n    //입력값 스테이트\r\n    //순서가 바뀐 생성번호\r\n    const [numArr,setNumArr] = useState([]);\r\n\r\n    //순서가 정렬된 생성번호\r\n    const [modalNumArr,setModalNumArr] = useState([]);\r\n\r\n    //무작위 번호\r\n    const [exNumArr,setExNumArr] = useState([]);\r\n    \r\n    //번호생성 함수\r\n    const createNumArr = () => {\r\n        if(!isStarted){\r\n        let exArr = exRef.current.value.split(',').map(Number); //제외번호 배열이 number타입으로 저장됨\r\n        console.log(...exArr)\r\n        setExNumArr([...exArr])\r\n        \r\n        let tempArr = []; \r\n        // 시작번호부터 끝번호까지 제외번호 제외하고 tempArr에 저장\r\n        for(let i=startRef.current.value;i<parseInt(lastRef.current.value)+1;++i){\r\n            if(!exArr.includes(i)){\r\n               \r\n            tempArr.push(parseInt(i));\r\n            }\r\n            \r\n        };\r\n       \r\n        setModalNumArr([...tempArr])\r\n        //번호 랜덤으로 배치\r\n        tempArr.sort(()=>Math.random()-0.5);\r\n\r\n        setNumArr([...tempArr])\r\n        \r\n    }\r\n    }\r\n\r\n\r\n    //reset버튼\r\n    const resetConfirm = () => {\r\n        if(window.confirm('정말 초기화하실거에요?')){\r\n            reset()\r\n        }else{\r\n            console.log('변화없음')\r\n        }\r\n    }\r\n    const reset = () => {\r\n        setIsStarted(false);\r\n        let arr = []\r\n        setDoubleArr([...arr])\r\n        setExNumArr([...arr])\r\n        setNumArr([...arr])\r\n        setModalNumArr([...arr])\r\n  \r\n    }\r\n\r\n    //start버튼\r\n    const start = () => {\r\n        if(doubleArr.length !=0 && numArr.length !=0){\r\n            setIsStarted(true)\r\n        } else {\r\n            alert('책상과 번호를 생성해주세요~')\r\n        }\r\n    }\r\n\r\n    //transition\r\n    const [index,set] = useState(0)\r\n    const transition = useTransition(index,{\r\n      from: {x: 100 , opacity: 0, position: 'absolute'},\r\n      enter: {x: 0, opacity: 1},\r\n      leave: {x: -50, opacity: 0}\r\n    })\r\n\r\n\r\n    function nextClicked(e){\r\n        set(state => (state + 1)%2);\r\n        \r\n    }\r\n    //페이지 배열\r\n    const pages = [\r\n        ({style}) => \r\n        <div  className=\"item1\" style={{transform: 'translateX(' +  (window.innerWidth/2-500) + 'px)', }}>\r\n            <div style={{padding:'20px'}}>\r\n                <div>\r\n                    <input  ref={colRef}  id='col' placeholder='col'></input>\r\n                </div>\r\n                <div>\r\n                    <input  ref={rowRef} id='row' placeholder='row'></input>\r\n                </div>\r\n            </div>\r\n            <Button variant=\"danger\" onClick={()=>{createArr()}}>책상생성</Button>\r\n            <div className='smallDesk'>\r\n            <DeskInput arr={doubleArr} propsFunction={nextClicked}/>\r\n            \r\n\r\n                \r\n            </div>\r\n            <Button variant='danger' onClick={() => {nextClicked()}}>다음</Button>\r\n        </div>,\r\n        ({style}) =>  \r\n        <div  className=\"item2\" style={{transform: 'translateX(' +  (window.innerWidth/2-350) + 'px)'}}> \r\n        <div>\r\n            <div style={{padding: '25px 50px', display: 'flex', justifyContent: 'space-between'}}>\r\n\r\n                <input id='start' placeholder='시작번호' ref={startRef}></input>\r\n\r\n                <input id='end' placeholder='끝번호' ref={lastRef}></input>\r\n\r\n                <input id='ex'placeholder='제외번호' ref={exRef}></input>\r\n            </div>\r\n        </div>\r\n        <Button variant=\"danger\" onClick={()=>createNumArr()}>번호생성</Button>\r\n        <NumberContainer>\r\n            <div style={{height: '50%'}}>\r\n                <h4>생성된번호</h4>\r\n                <div>{modalNumArr.map((a,i)=>{\r\n                    \r\n                    if(i!=modalNumArr.length-1){\r\n                    return(\r\n                        a + ','\r\n                        \r\n                    )} else {\r\n                        return (\r\n                            a\r\n                        )\r\n                    }\r\n                    \r\n                })}</div>\r\n            </div>\r\n            <div style={{height: '50%'}}>\r\n            <h4>제외된번호</h4>\r\n                <div>{exNumArr.map((a,i)=>{\r\n                    if(a===0){\r\n                        return(\r\n                            '없음'\r\n                        )\r\n                    }\r\n                    else if(i!=exNumArr.length-1){\r\n                    return(\r\n                        a + ','\r\n                    )} else {\r\n                        return (\r\n                            a\r\n                        )\r\n                    }\r\n                    \r\n                })}</div>\r\n            </div>\r\n        </NumberContainer>\r\n        <Button variant='danger' onClick={() => {is확인clicked(true)}}>확인</Button>\r\n        </div>,\r\n        \r\n      ]\r\n      //최종 확인버튼 눌림\r\n      const [확인,set확인] = useState(false);\r\n      const is확인clicked = () => {\r\n        set확인(true)\r\n      }\r\n\r\n      const transition2 = useTransition(확인,{\r\n        enter: {opacity: 1},\r\n        leave: {opacity: 0}\r\n\r\n    })\r\n\r\n    //책상 크기\r\n    const [deskWidth,setDeskWidth] = useState(0);\r\n    const [deskHeight,setDeskHeight]= useState(0);\r\n    const calLength = () => {\r\n        if(col>=row){\r\n            let tempLength;\r\n            tempLength = (window.innerHeight/col)*7/10;\r\n            tempLength = tempLength * 7 / 5;\r\n            return tempLength\r\n        } else {\r\n            let tempLength;\r\n            tempLength = (window.innerWidth/row)*7/10;\r\n            tempLength = tempLength;\r\n            return tempLength\r\n        }\r\n    }\r\n    return(\r\n     \r\n        <Container style={{height: window.innerHeight}}>\r\n       \r\n            {transition2((style,item)=>{\r\n                return(\r\n                    !item ?\r\n                    <animated.div style={style}>\r\n                       \r\n                        {transition((style,item)=>{\r\n                        const Page = pages[item]\r\n                        return (\r\n                            <animated.div style={style}>\r\n                                <Page></Page>\r\n                            </animated.div>\r\n                        )\r\n                        })}\r\n\r\n                    </animated.div>\r\n                    : isStarted\r\n                        ?<Button className='btnStyle' variant='danger' onClick={()=>{resetConfirm()}}>reset</Button>\r\n                        :<Button className='btnStyle' variant='danger' onClick={()=>{start()}}>start</Button>\r\n                    \r\n                )\r\n               \r\n            \r\n                \r\n            \r\n            })}\r\n            \r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n               \r\n            \r\n                {확인 ?\r\n                <DeskWrapper style={{height: window.innerHeight * 9/10}}>\r\n                <table>\r\n\r\n                    {/* 이차원 배열과 map함수로 desk 만들기 */}\r\n                    {doubleArr.map((a,i)=>{\r\n                        return(\r\n                            <tr>\r\n                                {doubleArr[i].map((a,j)=>{\r\n                                    if(a===1){\r\n                                        return(\r\n                                            <td>\r\n                                                <Desk onClick={()=>{deskClicked(i,j)}} style={{width: (window.innerWidth*21)/(60*col + 1) + 'px', height: (window.innerHeight*21)/(30*row + 1) + 'px' }}>\r\n                                                    {isStarted?\r\n                                                    numArr[i*row + j - numToggle]\r\n                                                : null}\r\n                                                    \r\n                                                </Desk>\r\n                                            </td>\r\n                                            \r\n                                        )\r\n                                    } else {\r\n                                        {numToggle++;}\r\n                                        return (\r\n                                            <td>\r\n                                                <Desk2 onClick={()=>{deskClicked(i,j)}} style={{width: (window.innerWidth*21)/(30*col + 1) + 'px', height: (window.innerHeight*21)/(30*row + 1) + 'px' }}>\r\n                                                    \r\n                                                </Desk2>\r\n                                            </td>\r\n                                        )\r\n                                    }\r\n                                    \r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </table>\r\n                </DeskWrapper>\r\n                : ''}\r\n            \r\n            {/* {isStarted\r\n                ?<Button variant='danger' onClick={()=>{resetConfirm()}}>reset</Button>\r\n                :<Button variant='danger' onClick={()=>{start()}}>start</Button>} */}\r\n\r\n            \r\n            <div>\r\n\r\n\r\n                        \r\n\r\n\r\n            \r\n            </div>\r\n            \r\n\r\n\r\n\r\n\r\n            \r\n        </Container>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default Test2;","import React, {useState, useEffect, useRef} from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport './test3.css'\r\n\r\n\r\nconst Container = styled.div`\r\n    \r\n    width: 100%;\r\n    height: 1000px;\r\n    min-width: 1300px;\r\n    background: gray;\r\n    margin: auto;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n    width: 50%;\r\n    height: 100px;\r\n    background: white;\r\n    float: left;\r\n    background: skyblue;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    button {\r\n        width: 50px;\r\n        height: 70px;\r\n        position: relative;\r\n        top: -5px;\r\n    }\r\n    \r\n`\r\n\r\nconst Wrapper2 = styled.div`\r\n    width: 50%;\r\n    height: 100px;\r\n    background: white;\r\n    float: left;\r\n    background: green;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    button {\r\n        width: 50px;\r\n        height: 70px;\r\n        position: relative;\r\n        top: -10px;\r\n    }\r\n`\r\n\r\n\r\n\r\n\r\nfunction Test3() {\r\n    return(\r\n        <Container>\r\n            <Wrapper>\r\n                <div className='inputWrapper'>\r\n                    <div>\r\n                        <label  for='col'>col</label>\r\n                        <input  id='col' ></input>\r\n                    </div> \r\n                    <div>\r\n                        <label  for='row'>row</label>\r\n                        <input  id='row'></input>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <button>책상생성</button> \r\n                \r\n                \r\n            </Wrapper>\r\n            <Wrapper2>\r\n                <div className='inputWrapper2'>\r\n                    <div className='numberInput'>\r\n                        <label for='start'>시작번호</label>\r\n                        <input id='start'></input>\r\n                        ~\r\n                        <label for='end'>끝번호</label>\r\n                        <input id='end'></input>\r\n                    </div>\r\n                    <div>\r\n                        <label for='ex'>제외번호</label>\r\n                        <input id='ex'></input>\r\n                    </div>\r\n                </div>\r\n                <button>번호생성</button>\r\n            </Wrapper2>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Test3","import logo from './logo.svg';\nimport './App.css';\nimport Test from './components/test.js'\nimport Test2 from './components/test2.js'\nimport Test3 from './components/test3.js'\nimport {Route} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        <Test2 />\nasdf\n \n    </div>\n    \n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}